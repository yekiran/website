---
import Layout from "../layouts/Layout.astro";
---

<Layout title="نرخ دلار به تومان">
  <div id="info">
    <div>
      متوسط درآمد هر ایرانی حدود ۵۰۰ دلار یا ۲۵ میلیون تومان در ماه، معادل نصف آیفون ۱۳، است.
    </div>
  </div>
  <label id="log-label">
    <input type="checkbox" id="log" />
    لگاریتمی
  </label>
</Layout>

<style>
  html,
  body {
    margin: 0;
    font-family: "Trebuchet MS", Roboto, Ubuntu, sans-serif;
    background: #f9fafb;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  #info {
    position: fixed;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    z-index: 100;
    color: #fff;
    font-size: 16px;
    direction: rtl;
    text-align: center;
    width: 100%;
    background-color: rgba(205, 0, 1, 0.56);
  }

  #info div {
    padding: 8px 4px;
    line-height: 1.4;
  }

  #log-label {
    position: fixed;
    bottom: 60px;
    left: 10px;
    z-index: 100;
    color: #fff;
    display: flex;
    user-select: none;
  }

  #log {
    width: 16px;
    height: 16px;
  }

  .floating-tooltip-2 {
    width: 96px;
    height: 80px;
    position: absolute;
    display: none;
    padding: 8px;
    box-sizing: border-box;
    font-size: 12px;
    color: #131722;
    background-color: rgba(255, 255, 255, 1);
    text-align: left;
    z-index: 1000;
    top: 12px;
    left: 12px;
    pointer-events: none;
    border: 1px solid rgba(0, 150, 136, 1);
    border-radius: 2px;
  }
</style>

<script>
  import { createChart, PriceScaleMode, LineStyle } from "lightweight-charts";

  document.body.style.position = "relative";

  var container = document.createElement("div");
  document.body.appendChild(container);

  var width = window.innerWidth;
  var height = window.innerHeight;

  var chart = createChart(container, {
    rightPriceScale: {
      mode: PriceScaleMode.Normal,
      scaleMargins: {
        top: 0.2,
        bottom: 0.01,
      },
    },
    timeScale: {
      borderVisible: false,
    },
    layout: {
      background: { color: "#111" },
      textColor: "#bbb",
    },
    grid: {
      horzLines: {
        visible: false,
      },
      vertLines: {
        visible: false,
      },
    },
    crosshair: {
      horzLine: {
        color: "rgba(205, 0, 1, 1)",
      },
      vertLine: {
        color: "rgba(205, 0, 1, 1)",
        labelVisible: false,
      },
    },
  });

  chart.resize(width, height);

  var series = chart.addAreaSeries({
    topColor: "rgba(205, 0, 1, 0.56)",
    bottomColor: "rgba(205, 0, 1, 0.04)",
    lineColor: "rgba(205, 0, 1, 1)",
    lineWidth: 2,
  });

  series.setData([
    { time: "1979-01-01", value: 10.0 },
    { time: "1980-01-01", value: 14.0 },
    { time: "1981-01-01", value: 20.0 },
    { time: "1982-01-01", value: 27.0 },
    { time: "1983-01-01", value: 35.0 },
    { time: "1984-01-01", value: 45.0 },
    { time: "1985-01-01", value: 58.0 },
    { time: "1986-01-01", value: 61.0 },
    { time: "1987-01-01", value: 74.0 },
    { time: "1988-01-01", value: 99.0 },
    { time: "1989-01-01", value: 96.0 },
    { time: "1990-01-01", value: 120.0 },
    { time: "1991-01-01", value: 141.0 },
    { time: "1992-01-01", value: 142.0 },
    { time: "1993-01-01", value: 149.0 },
    { time: "1994-01-01", value: 180.0 },
    { time: "1995-01-01", value: 263.0 },
    { time: "1996-01-01", value: 403.0 },
    { time: "1997-01-01", value: 444.0 },
    { time: "1998-01-01", value: 478.0 },
    { time: "1999-01-01", value: 646.0 },
    { time: "2000-01-01", value: 863.0 },
    { time: "2001-01-01", value: 813.0 },
    { time: "2002-01-01", value: 792.0 },
    { time: "2003-01-01", value: 799.0 },
    { time: "2004-01-01", value: 832.0 },
    { time: "2005-01-01", value: 874.0 },
    { time: "2006-01-01", value: 904.0 },
    { time: "2007-01-01", value: 922.0 },
    { time: "2008-01-01", value: 935.0 },
    { time: "2009-01-01", value: 966.0 },
    { time: "2010-01-01", value: 1000.0 },
    { time: "2011-01-01", value: 1100.0 },
    { time: "2012-01-01", value: 1980.0 },
    { time: "2013-01-01", value: 3690.0 },
    { time: "2014-01-01", value: 3690.0 },
    { time: "2015-01-01", value: 3140.0 },
    { time: "2016-01-01", value: 3316.0 },
    { time: "2017-01-01", value: 3540.0 },
    { time: "2018-01-01", value: 3826.0 },
    { time: "2019-01-01", value: 10577.0 },
    { time: "2020-01-01", value: 11991.0 },
    { time: "2021-01-01", value: 21702.0 },
    { time: "2022-01-01", value: 25729.0 },
    { time: "2023-01-01", value: 50000.0 },
  ]);

  chart.timeScale().setVisibleRange({ from: "1979-01-01", to: "2023-01-01" });

  const toolTipWidth = 80;
  const toolTipHeight = 80;
  const toolTipMargin = 15;

  // Create and style the tooltip html element
  const toolTip = document.createElement("div");
  toolTip.style.cssText = `width: 96px; height: 80px; position: absolute; display: none; padding: 8px; box-sizing: border-box; font-size: 12px; text-align: left; z-index: 1000; top: 12px; left: 12px; pointer-events: none; border: 1px solid; border-radius: 2px;font-family: -apple-system, BlinkMacSystemFont, 'Trebuchet MS', Roboto, Ubuntu, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;`;
  toolTip.style.background = "white";
  toolTip.style.color = "black";
  toolTip.style.borderColor = "rgba(0, 150, 136, 1)";
  container.appendChild(toolTip);

  // update tooltip
  chart.subscribeCrosshairMove((param) => {
    if (
      param.point === undefined ||
      !param.time ||
      param.point.x < 0 ||
      param.point.x > container.clientWidth ||
      param.point.y < 0 ||
      param.point.y > container.clientHeight
    ) {
      toolTip.style.display = "none";
    } else {
      // time will be in the same format that we supplied to setData.
      // thus it will be YYYY-MM-DD
      const dateStr = param.time;
      toolTip.style.display = "block";
      const data: any = param.seriesData.get(series);
      const price = data.value !== undefined ? data.value : data.close;
      toolTip.innerHTML = `<div>دلار به تومان</div><div style="font-size: 24px; margin: 4px 0px; color: ${"black"}">
			${Math.round(100 * price) / 100}
			</div><div style="color: ${"black"}">
			${(dateStr as string).slice(0, 4)}
			</div>`;

      const coordinate = series.priceToCoordinate(price);
      let shiftedCoordinate = param.point.x - 50;
      if (coordinate === null) {
        return;
      }
      shiftedCoordinate = Math.max(
        0,
        Math.min(container.clientWidth - toolTipWidth, shiftedCoordinate),
      );
      const coordinateY =
        coordinate - toolTipHeight - toolTipMargin > 0
          ? coordinate - toolTipHeight - toolTipMargin
          : Math.max(
              0,
              Math.min(
                container.clientHeight - toolTipHeight - toolTipMargin,
                coordinate + toolTipMargin,
              ),
            );
      toolTip.style.left = shiftedCoordinate + "px";
      toolTip.style.top = coordinateY + "px";
    }
  });

  // Logarithmic checkbox
  const logCheck = document.getElementById("log") as HTMLInputElement;
  logCheck.addEventListener("change", () => {
    chart.priceScale("right").applyOptions({
      mode: logCheck.checked ? PriceScaleMode.Logarithmic : PriceScaleMode.Normal,
    });
  });

  // Resize
  window.addEventListener("resize", () => {
    chart.resize(window.innerWidth, window.innerHeight);
  });
</script>
